version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: parking_mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-parking123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-parking_system}
      MYSQL_USER: ${MYSQL_USER:-parking_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-parking123}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d
      - ../backups:/backups
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    restart: unless-stopped
    networks:
      - app-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: parking_redis
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: parking_backend
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - FLASK_APP=src/app.py
      - FLASK_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${MYSQL_USER:-parking_user}
      - DB_PASSWORD=${MYSQL_PASSWORD:-parking123}
      - DB_NAME=${MYSQL_DATABASE:-parking_system}
      - REDIS_URL=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key}
      - HUNYUAN_API_KEY=${HUNYUAN_API_KEY:-}
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
      - ./backend/instance:/app/instance
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 20s
      retries: 10
      interval: 30s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: parking_frontend
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local