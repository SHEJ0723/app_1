import{m as n}from"./index-06309a7e.js";import{c as o}from"./cacheManager-5937ebc8.js";const t=n.create({baseURL:"http://localhost:5000",withCredentials:!0,timeout:1e4,headers:{"Content-Type":"application/json"}});t.interceptors.request.use(e=>{const r=localStorage.getItem("token");return r&&(e.headers.Authorization=`Bearer ${r}`),e},e=>(console.error("请求错误:",e),Promise.reject(e)));t.interceptors.response.use(e=>e.data,e=>{if(e.response){const{status:r,data:s}=e.response;switch(r){case 400:console.error("请求参数错误:",s.message);break;case 401:console.error("未授权或Token过期:",s.message);break;case 403:console.error("禁止访问:",s.message);break;case 404:console.error("资源不存在:",s.message);break;case 500:console.error("服务器错误:",s.message);break;default:console.error("未知错误:",s.message)}return Promise.reject(s)}else return e.request?(console.error("网络错误，请检查您的网络连接"),Promise.reject(new Error("网络错误，请检查您的网络连接"))):(console.error("请求配置错误:",e.message),Promise.reject(e))});const i=async(e={})=>{try{const r=`parking_spots_${JSON.stringify(e)}`,s=o.get(r,{useStorage:!0,namespace:"parking"});if(s)return s;const a=await t.get("/api/parking-spots",{params:e});return o.set(r,a,2*60*1e3,{useStorage:!0,namespace:"parking"}),a}catch(r){throw console.error("获取停车位列表失败:",r),r}},g=async()=>{try{const e="parking_stats",r=o.get(e,{useStorage:!0,namespace:"parking"});if(r)return r;const s=await t.get("/api/parking-stats");return o.set(e,s,1*60*1e3,{useStorage:!0,namespace:"parking"}),s}catch(e){throw console.error("获取停车场统计数据失败:",e),e}},u=async e=>{try{return await t.post("/api/parking-spots",e)}catch(r){throw console.error("创建停车位失败:",r),r}},k=async(e,r)=>{try{return await t.put(`/api/parking-spots/${e}`,r)}catch(s){throw console.error("更新停车位失败:",s),s}},l=async e=>{try{return await t.delete(`/api/parking-spots/${e}`)}catch(r){throw console.error("删除停车位失败:",r),r}};export{g as a,u as c,l as d,i as g,k as u};
