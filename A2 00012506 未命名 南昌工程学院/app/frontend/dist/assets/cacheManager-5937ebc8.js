const c={defaultTTL:3e5,maxItems:100,storagePrefix:"app_cache_",enableStorage:!0};class l{constructor(a,r,e=c.defaultTTL){this.key=a,this.value=r,this.timestamp=Date.now(),this.ttl=e,this.expiresAt=this.timestamp+e}isExpired(){return Date.now()>this.expiresAt}getTimeToLive(){return Math.max(0,this.expiresAt-Date.now())}}class g{constructor(){this.memoryCache=new Map,this.init()}init(){this.cleanupMemoryCache(),this.cleanupStorageCache(),setInterval(()=>{this.cleanupMemoryCache(),this.cleanupStorageCache()},6e4)}set(a,r,e=c.defaultTTL,t={}){const{useStorage:s=!1,namespace:o="default"}=t,n=`${o}:${a}`,m=new l(n,r,e);if(this.memoryCache.set(n,m),s&&c.enableStorage)try{const i=c.storagePrefix+n;localStorage.setItem(i,JSON.stringify(m))}catch(i){console.warn("本地存储缓存失败:",i)}this.enforceSizeLimit()}get(a,r={}){const{useStorage:e=!1,namespace:t="default"}=r,s=`${t}:${a}`;let o=this.memoryCache.get(s);if(!o&&e&&c.enableStorage)try{const n=c.storagePrefix+s,m=localStorage.getItem(n);if(m){const i=JSON.parse(m);o=new l(i.key,i.value,i.ttl),o.timestamp=i.timestamp,o.expiresAt=i.expiresAt,o.isExpired()||this.memoryCache.set(s,o)}}catch(n){console.warn("读取本地存储缓存失败:",n)}return!o||o.isExpired()?null:o.value}delete(a,r={}){const{useStorage:e=!1,namespace:t="default"}=r,s=`${t}:${a}`;if(this.memoryCache.delete(s),e&&c.enableStorage)try{const o=c.storagePrefix+s;localStorage.removeItem(o)}catch(o){console.warn("删除本地存储缓存失败:",o)}}clear(a={}){const{useStorage:r=!1,namespace:e="default"}=a;if(e==="default")this.memoryCache.clear();else{const t=`${e}:`;for(const s of this.memoryCache.keys())s.startsWith(t)&&this.memoryCache.delete(s)}if(r&&c.enableStorage)try{const t=c.storagePrefix+e+":";for(let s=localStorage.length-1;s>=0;s--){const o=localStorage.key(s);o&&o.startsWith(t)&&localStorage.removeItem(o)}}catch(t){console.warn("清空本地存储缓存失败:",t)}}has(a,r={}){const{useStorage:e=!1,namespace:t="default"}=r,s=`${t}:${a}`,o=this.memoryCache.get(s);if(o&&!o.isExpired())return!0;if(e&&c.enableStorage)try{const n=c.storagePrefix+s,m=localStorage.getItem(n);if(m){const i=JSON.parse(m),h=new l(i.key,i.value,i.ttl);return h.timestamp=i.timestamp,h.expiresAt=i.expiresAt,!h.isExpired()}}catch(n){console.warn("检查本地存储缓存失败:",n)}return!1}getStats(){const a=this.memoryCache.size;let r=0;try{for(let e=0;e<localStorage.length;e++){const t=localStorage.key(e);t&&t.startsWith(c.storagePrefix)&&r++}}catch(e){console.warn("获取本地存储统计失败:",e)}return{memorySize:a,storageSize:r,maxItems:c.maxItems,enableStorage:c.enableStorage}}cleanupMemoryCache(){for(const[a,r]of this.memoryCache.entries())r.isExpired()&&this.memoryCache.delete(a)}cleanupStorageCache(){try{for(let a=localStorage.length-1;a>=0;a--){const r=localStorage.key(a);if(r&&r.startsWith(c.storagePrefix)){const e=localStorage.getItem(r);if(e)try{const t=JSON.parse(e),s=new l(t.key,t.value,t.ttl);s.timestamp=t.timestamp,s.expiresAt=t.expiresAt,s.isExpired()&&localStorage.removeItem(r)}catch{localStorage.removeItem(r)}}}}catch(a){console.warn("清理本地存储缓存失败:",a)}}enforceSizeLimit(){if(this.memoryCache.size<=c.maxItems)return;const a=Array.from(this.memoryCache.entries());a.sort((e,t)=>e[1].timestamp-t[1].timestamp);const r=a.slice(0,this.memoryCache.size-c.maxItems);for(const[e]of r)this.memoryCache.delete(e)}}const y=new g;export{y as c};
